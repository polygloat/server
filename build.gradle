/*
 * Copyright (c) 2020. Tolgee
 */

buildscript {
    repositories {
        mavenCentral()
    }
    ext {
        kotlinVersion = '1.5.10'
        springBootVersion = '2.4.5'
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
        classpath group: 'commons-io', name: 'commons-io', version: '2.10.0'
    }
}

plugins {
    id "com.palantir.docker" version "0.26.0"
    id 'com.palantir.docker-compose' version "0.26.0"
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.springframework.boot' version '2.4.5'
    id 'java'
    id 'org.liquibase.gradle' version '2.0.4'
    id 'org.jetbrains.kotlin.jvm' version "${kotlinVersion}"
    id "org.jetbrains.kotlin.plugin.jpa" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.kapt" version "${kotlinVersion}"
}

group = 'io.tolgee'

if (System.getenv().containsKey("VERSION")) {
    project.version = System.getenv().get("VERSION")
} else {
    project.version = 'local'
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    ktlint
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "org.jetbrains.kotlin.plugin.jpa"
apply plugin: "kotlin-allopen"

repositories {
    mavenCentral()
    jcenter()
}

sourceCompatibility = 11

idea {
    module {
        generatedSourceDirs += files('build/generated/source/kapt/main', 'build/generated/source/kaptKotlin/main')
    }
}

allOpen {
    annotation("javax.persistence.Entity")
    annotation("javax.persistence.MappedSuperclass")
    annotation("javax.persistence.Embeddable")
    annotation("org.springframework.stereotype.Service")
    annotation("org.springframework.stereotype.Component")
    annotation("org.springframework.transaction.annotation.Transactional")
    annotation("org.springframework.beans.factory.annotation.Configurable")
}

def liveDbPostgres = [
        url         : 'jdbc:postgresql://localhost:5432/postgres',
        referenceUrl: 'hibernate:spring:io.tolgee' +
                '?dialect=org.hibernate.dialect.PostgreSQL95Dialect' +
                '&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy' +
                '&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy',
        username    : 'postgres',
        password    : 'postgres',
        driver      : "org.postgresql.Driver"
]

def liveDbH2 = [
        url         : "jdbc:h2:${project.projectDir}/build/tmp_db_schema_updates/db.h2;DATABASE_TO_LOWER=TRUE",
        referenceUrl: 'hibernate:spring:io.tolgee' +
                '?dialect=org.hibernate.dialect.H2Dialect' +
                '&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy' +
                '&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy',
        driver      : 'org.h2.Driver'
]

def liveDb = liveDbPostgres

liquibase {
    activities {
        //noinspection GroovyAssignabilityCheck
        main {
            changeLogFile 'src/main/resources/db/changelog/schema.xml'
            url liveDb.url
            referenceUrl liveDb.referenceUrl
            if (liveDb.username) {
                username liveDb.username
            }
            if (liveDb.password) {
                password liveDb.password
            }

            driver liveDb.driver
        }
    }
}

diff.dependsOn compileKotlin
diffChangeLog.dependsOn compileKotlin

compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

def LIQUIBASE_VERSION = "4.3.5"
def LIQUIBASE_HIBERNATE_VERSION = "4.3.5"
def JJWT_VERSION = "0.11.2"
def SPRING_DOC_VERSION = "1.5.9"

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-hateoas"
    implementation("org.springframework.data:spring-data-envers")
    kapt "org.springframework.boot:spring-boot-configuration-processor"
    compile "org.springframework.boot:spring-boot-configuration-processor"
    testCompile "org.springframework.boot:spring-boot-configuration-processor"
    implementation 'io.sentry:sentry-spring-boot-starter:5.0.1'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'com.h2database:h2'
    testCompile('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testCompile("org.assertj:assertj-core:3.19.0")
    testCompile("org.springframework.security:spring-security-test")
    implementation("org.springframework.ldap:spring-ldap-core")
    implementation("org.springframework.security:spring-security-ldap")
    implementation("org.springframework:spring-tx")
    implementation("com.unboundid:unboundid-ldapsdk")
    implementation "io.jsonwebtoken:jjwt-api:${JJWT_VERSION}"
    runtime "io.jsonwebtoken:jjwt-impl:${JJWT_VERSION}",
            "io.jsonwebtoken:jjwt-jackson:${JJWT_VERSION}"
    implementation("org.liquibase:liquibase-core:$LIQUIBASE_VERSION")
    runtime("org.liquibase:liquibase-core:$LIQUIBASE_VERSION")
    compile("org.liquibase:liquibase-core:$LIQUIBASE_VERSION")
    liquibaseRuntime("org.liquibase:liquibase-core:$LIQUIBASE_VERSION")
    liquibaseRuntime 'org.postgresql:postgresql'
    liquibaseRuntime('org.liquibase:liquibase-groovy-dsl:3.0.1')
    liquibaseRuntime("org.liquibase.ext:liquibase-hibernate5:$LIQUIBASE_HIBERNATE_VERSION")
    liquibaseRuntime('org.springframework.boot:spring-boot-starter-data-jpa')
    liquibaseRuntime sourceSets.main.output
    implementation 'com.github.javafaker:javafaker:1.0.2'
    implementation 'org.hibernate:hibernate-jpamodelgen'
    testCompile group: 'org.testng', name: 'testng', version: '7.4.0'
    implementation "org.springdoc:springdoc-openapi-webmvc-core:${SPRING_DOC_VERSION}"
    implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: "${SPRING_DOC_VERSION}"
    implementation group: 'org.springdoc', name: 'springdoc-openapi-kotlin', version: "${SPRING_DOC_VERSION}"
    implementation group: 'org.springdoc', name: 'springdoc-openapi-data-rest', version: "${SPRING_DOC_VERSION}"
    implementation group: 'org.springdoc', name: 'springdoc-openapi-hateoas', version: "${SPRING_DOC_VERSION}"
    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: '1.5.0-native-mt'
    kapt "org.hibernate:hibernate-jpamodelgen"
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlinVersion
    liquibaseRuntime group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlinVersion
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.12.3'
    implementation 'commons-codec:commons-codec:1.15'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.12.15'
    compile group: 'com.ninja-squad', name: 'springmockk', version: '3.0.1'
    implementation('org.reflections:reflections:0.9.12')
    implementation 'net.javacrumbs.json-unit:json-unit-assertj:2.26.0'
    testImplementation('org.mockito.kotlin:mockito-kotlin:3.2.0')
    testCompile("io.findify:s3mock_2.13:0.2.6")
    implementation group: 'com.ibm.icu', name: 'icu4j', version: '69.1'
    ktlint("com.pinterest:ktlint:0.41.0") {
        attributes {
            attribute(Bundling.BUNDLING_ATTRIBUTE, getObjects().named(Bundling, Bundling.EXTERNAL))
        }
    }
}

test {
    useTestNG()
}

springBoot {
    buildInfo {
        properties {
            version = project.version
        }
    }
}

bootJar {
    archiveFileName = "tolgee-${project.version}.jar"
    manifest {
        attributes('Implementation-Version': project.version)
    }
    onlyIf { System.getenv("SKIP_SERVER_BUILD") != "true" }
}

def unpackTarget = "build/dependency"

task unpack(type: Copy) {
    from(zipTree(project.tasks.findByName("bootJar").outputs.files.singleFile))
    into(unpackTarget)
    if (System.getenv("SKIP_SERVER_BUILD") != "true") {
        dependsOn "bootJar"
    }
}

apply from: "./gradle/webapp.gradle"
apply from: "./gradle/docker.gradle"
apply from: "./gradle/e2e.gradle"

project.tasks.findByName("compileKotlin").onlyIf { System.getenv("SKIP_SERVER_BUILD") != "true" }
project.tasks.findByName("bootBuildInfo").onlyIf { System.getenv("SKIP_SERVER_BUILD") != "true" }
project.tasks.findByName("compileJava").onlyIf { System.getenv("SKIP_SERVER_BUILD") != "true" }
project.tasks.findByName("bootJarMainClassName").onlyIf { System.getenv("SKIP_SERVER_BUILD") != "true" }

project.tasks.findByName("dockerPrepare").mustRunAfter(copyDist)

task buildProd(dependsOn: ['bootJar'])
task packWebapp(type: Zip) {
    dependsOn "unpack"
    dependsOn "copyDist"
    from "${project.projectDir}/build/dependency"
    archiveFileName = "tolgee-${project.version}.jar"
    destinationDirectory = file("$buildDir/libs")
    entryCompression ZipEntryCompression.STORED
}

tasks.findByName("build").dependsOn("runE2e")

sourceSets {
    main.kotlin.srcDirs = ['src/main/kotlin', 'src/main/java']
    test.kotlin.srcDirs = ['src/test/kotlin', 'src/test/java']
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "src/**/*.kt", "!**/data/PluralData.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // to add a baseline to check against prepend following args:
    // "--baseline=ktlint-baseline.xml"
    // see https://github.com/pinterest/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "-F", "src/**/*.kt", "!**/data/PluralData.kt"
}
